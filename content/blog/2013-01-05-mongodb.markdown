---
author: vishnur66
comments: false
date: 2013-01-05 09:39:03+00:00
layout: post
link: http://www.vishnu-tech.com/2013/01/mongodb/
slug: mongodb
title: Mongodb
wordpress_id: 156
categories:
- MONGO DB
tags:
- database
- install
- install mongodb
- linux
- mongo
- Mongodb
- Nosql
- ubuntu
---

## Why MongoDB?





	
  * **Document-oriented**

	
    * Documents (objects) map nicely to programming language data types

	
    * Embedded documents and arrays reduce need for joins

	
    * Dynamically-typed (schemaless) for easy schema evolution

	
    * No joins and no multi-document transactions for high performance and easy scalability




	
  * **High performance**

	
    * No joins and embedding makes reads and writes fast

	
    * Indexes including indexing of keys from embedded documents and arrays

	
    * Optional streaming writes (no acknowledgements)




	
  * **High availability**

	
    * Replicated servers with automatic master failover




	
  * **Easy scalability**

	
    * Automatic sharding (auto-partitioning of data across servers)

	
      * Reads and writes are distributed over shards

	
      * No joins or multi-document transactions make distributed queries easy and fast




	
    * Eventually-consistent reads can be distributed over replicated servers




	
  * **Rich query language**




## Mongo data model





	
  * A Mongo system (see deployment above) holds a set of databases

	
  * A **database** holds a set of collections

	
  * A **collection** holds a set of documents

	
  * A **document** is a set of fields

	
  * A **field** is a key-value pair

	
  * A **key** is a name (string)

	
  * A **value** is a

	
    * basic type like string, integer, float, timestamp, binary, etc.,

	
    * a document, or

	
    * an array of value




	
    * **Mongo query language**




	
  * To retrieve certain documents from a db collection, you supply a query document containing the fields the desired documents should match. For example, {name: {first: 'John', last: 'Doe'}} will match all documents in the collection with name of John Doe. Likewise, {name.last: 'Doe'} will match all documents with last name of Doe. Also, {name.last: /^D/} will match all documents with last name starting with 'D' (regular expression match).

	
  * Queries will also match inside embedded arrays. For example, {keywords: 'storage'} will match all documents with 'storage' in its keywords array. Likewise, {keywords: {$in: ['storage', 'DBMS']}} will match all documents with 'storage' or 'DBMS' in its keywords array.

	
  * If you have lots of documents in a collection and you want to make a query fast then build an index for that query. For example, ensureIndex({name.last: 1}) or ensureIndex({keywords: 1}). Note, indexes occupy space and slow down updates a bit, so use them only when the tradeoff is worth it.




# Install MongoDB on Ubuntu 10.04







### Configure Package Management System (APT)


The Ubuntu package management tool (i.e. dpkg and apt) ensure package consistency and authenticity by requiring that distributors sign packages with GPG keys. Issue the following command to import the [10gen public GPG Key](http://docs.mongodb.org/10gen-gpg-key.asc):







    
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10








Create a /etc/apt/sources.list.d/10gen.list file and include the following line for the 10gen repository.







    
    deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen








Now issue the following command to reload your repository:







    
    sudo apt-get update
















### Install Packages


Issue the following command to install the latest stable version of MongoDB:







    
    sudo apt-get install mongodb-10gen








When this command completes, you have successfully installed MongoDB! Continue for configuration and start-up suggestions.









## Configure MongoDB


These packages configure MongoDB using the /etc/mongodb.conf file in conjunction with the [_control script_](http://docs.mongodb.org/manual/reference/glossary/#term-101). You will find the control script is at /etc/init.d/mongodb.

This MongoDB instance will store its data files in the /var/lib/mongodb and its log files in /var/log/mongodb, and run using the mongodb user account.




Note

If you change the user that runs the MongoDB process, you will need to modify the access control rights to the /var/lib/mongodb and /var/log/mongodb directories.












## Controlling MongoDB







### Starting MongoDB


You can start the mongod process by issuing the following command:







    
    sudo service mongodb start








You can verify that mongod has started successfully by checking the contents of the log file at /var/log/mongodb/mongodb.log.









### Stopping MongoDB


As needed, you may stop the mongod process by issuing the following command:







    
    sudo service mongodb stop
















### Restarting MongoDB


You may restart the mongod process by issuing the following command:







    
    sudo service mongodb restart
















### Controlling [mongos](http://docs.mongodb.org/manual/reference/config-database/#mongos)


As of the current release, there are no [_control scripts_](http://docs.mongodb.org/manual/reference/glossary/#term-101) for [mongos](http://docs.mongodb.org/manual/reference/config-database/#mongos). [mongos](http://docs.mongodb.org/manual/reference/config-database/#mongos) is only used in sharding deployments and typically do not run on the same systems where mongod runs. You can use the mongodb script referenced above to derive your own [mongos](http://docs.mongodb.org/manual/reference/config-database/#mongos) control script.












**Using MongoDB**

























Among the tools included with the MongoDB package, is the mongo shell. You can connect to your MongoDB instance by issuing the following command at the system prompt:







    
    mongo
    > show dbs (); ---> to show your databases 
    > use <databasename> ----> To switch database 
    > db.createCollection("collectionname") ---> to create collection 
    > db.collectionname.find(); ---> To see the contents in the collection
    <code>> db.addUser("theadmin", "anadminpassword") </code>---> To create user and password
    
    
    









































